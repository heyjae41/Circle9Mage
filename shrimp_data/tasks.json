{
  "tasks": [
    {
      "id": "4214015f-9e13-494e-b4e2-0a2edfe822fe",
      "name": "AI 채팅 화면 기본 UI 구현",
      "description": "ChatGPT 스타일의 채팅 인터페이스를 구현합니다. FlatList 기반으로 메시지 리스트를 표시하고, 사용자 입력창과 전송 버튼을 포함한 완전한 채팅 UI를 만듭니다.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-08-22T12:55:04.267Z",
      "updatedAt": "2025-08-22T12:55:04.267Z",
      "relatedFiles": [
        {
          "path": "mobile/src/screens/AIChatScreen.tsx",
          "type": "CREATE",
          "description": "새로운 AI 채팅 화면 컴포넌트"
        },
        {
          "path": "mobile/src/screens/HistoryScreen.tsx",
          "type": "REFERENCE",
          "description": "FlatList 렌더링 패턴 참조"
        },
        {
          "path": "mobile/src/screens/HomeScreen.tsx",
          "type": "TO_MODIFY",
          "description": "AI 버튼 클릭 시 AIChatScreen으로 네비게이션",
          "lineStart": 315,
          "lineEnd": 330
        }
      ],
      "implementationGuide": "// 기존 HistoryScreen의 FlatList 패턴 재사용\\n1. AIChatScreen.tsx 생성\\n2. FlatList로 메시지 목록 렌더링\\n3. TextInput + TouchableOpacity로 입력부 구현\\n4. 기존 LinearGradient, Ionicons 스타일 통일\\n\\ninterface ChatMessage {\\n  id: string;\\n  type: 'user' | 'ai';\\n  content: string;\\n  timestamp: Date;\\n  data?: any; // 추가 데이터 (잔액, 거래정보 등)\\n}\\n\\nconst renderMessage = ({ item }: { item: ChatMessage }) => (\\n  <View style={[styles.messageContainer, item.type === 'user' ? styles.userMessage : styles.aiMessage]}>\\n    <Text style={styles.messageText}>{item.content}</Text>\\n  </View>\\n);",
      "verificationCriteria": "채팅 UI가 정상적으로 렌더링되고, 메시지 입력/전송이 가능하며, 기존 앱의 디자인 가이드와 일치하는지 확인",
      "analysisResult": "AI 기반 자연어 USDC 송금 인터페이스 구현 - ChatGPT 스타일의 대화형 UI로 복잡한 Web3 송금을 \"10달러 송금해줘\"처럼 간단한 자연어 명령으로 처리할 수 있는 혁신적인 UX 구현. 기존 Circle API 통합과 React Native 인프라를 최대한 재사용하여 안정성과 일관성을 보장."
    },
    {
      "id": "23402ed2-3494-4069-8352-469319a25112",
      "name": "자연어 명령 파싱 시스템 구현",
      "description": "사용자의 자연어 입력을 분석하여 송금, 잔액조회, 거래내역 등의 의도를 파악하는 패턴 매칭 및 AI 파싱 시스템을 구현합니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "4214015f-9e13-494e-b4e2-0a2edfe822fe"
        }
      ],
      "createdAt": "2025-08-22T12:55:04.267Z",
      "updatedAt": "2025-08-22T12:55:04.267Z",
      "relatedFiles": [
        {
          "path": "mobile/src/services/aiChatService.ts",
          "type": "CREATE",
          "description": "AI 채팅 관련 API 호출 서비스"
        },
        {
          "path": "backend/app/api/routes/ai_chat.py",
          "type": "CREATE",
          "description": "AI 채팅 백엔드 API 엔드포인트"
        },
        {
          "path": "mobile/src/utils/nlpParser.ts",
          "type": "CREATE",
          "description": "클라이언트 사이드 자연어 패턴 매칭"
        }
      ],
      "implementationGuide": "// 클라이언트 사이드 패턴 매칭 + 백엔드 AI 파싱\\n1. Frontend: 기본 패턴 매칭 (정규식)\\n2. Backend: /api/v1/ai-chat/parse 엔드포인트\\n3. 의도 분류: TRANSFER, BALANCE, HISTORY, HELP\\n\\n// Frontend 패턴 매칭\\nconst parseIntent = (message: string) => {\\n  const transferPatterns = [/송금/, /보내/, /전송/, /send/i];\\n  const balancePatterns = [/잔액/, /balance/i, /얼마/];\\n  // ... 패턴 정의\\n};\\n\\n// Backend AI 파싱\\n@router.post('/ai-chat/parse')\\nasync def parse_natural_language(request: NLParseRequest):\\n    # GPT API 또는 로컬 NLP 모델 활용\\n    intent = await ai_service.parse_intent(request.message)\\n    return ParseResponse(intent=intent, entities=extracted_entities)",
      "verificationCriteria": "자연어 입력이 정확한 의도로 분류되고, 기본적인 송금/잔액조회 명령이 올바르게 파싱되는지 확인",
      "analysisResult": "AI 기반 자연어 USDC 송금 인터페이스 구현 - ChatGPT 스타일의 대화형 UI로 복잡한 Web3 송금을 \"10달러 송금해줘\"처럼 간단한 자연어 명령으로 처리할 수 있는 혁신적인 UX 구현. 기존 Circle API 통합과 React Native 인프라를 최대한 재사용하여 안정성과 일관성을 보장."
    },
    {
      "id": "3ecdd1c9-6e43-4ba3-ba4a-90e0fc3e2895",
      "name": "기존 API 함수와 AI 채팅 연동",
      "description": "AppContext의 기존 함수들(createTransfer, loadWallets, loadTransactions)을 AI 채팅에서 활용할 수 있도록 연동합니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "23402ed2-3494-4069-8352-469319a25112"
        }
      ],
      "createdAt": "2025-08-22T12:55:04.267Z",
      "updatedAt": "2025-08-22T12:55:04.267Z",
      "relatedFiles": [
        {
          "path": "mobile/src/contexts/AppContext.tsx",
          "type": "REFERENCE",
          "description": "기존 API 함수들 활용"
        },
        {
          "path": "mobile/src/screens/AIChatScreen.tsx",
          "type": "TO_MODIFY",
          "description": "AI 채팅에서 기존 API 함수 호출 로직 추가"
        },
        {
          "path": "mobile/src/services/aiChatService.ts",
          "type": "TO_MODIFY",
          "description": "기존 API와의 연동 로직 추가"
        }
      ],
      "implementationGuide": "// AppContext 기존 함수 재사용\\n1. useApp() 훅으로 기존 함수들 접근\\n2. AI 응답에 따른 기존 API 호출\\n3. 결과를 채팅 메시지로 변환\\n\\nconst handleAIResponse = async (intent: string, entities: any) => {\\n  switch (intent) {\\n    case 'TRANSFER':\\n      // createTransfer 함수 활용\\n      const result = await createTransfer({\\n        sourceWalletId: entities.sourceWallet,\\n        targetAddress: entities.targetAddress,\\n        amount: entities.amount\\n      });\\n      return formatTransferResponse(result);\\n    case 'BALANCE':\\n      // 기존 state.wallets 활용\\n      return formatBalanceResponse(state.wallets);\\n  }\\n};",
      "verificationCriteria": "AI 채팅에서 실제 송금이 실행되고, 잔액 조회와 거래내역이 정확히 표시되는지 확인",
      "analysisResult": "AI 기반 자연어 USDC 송금 인터페이스 구현 - ChatGPT 스타일의 대화형 UI로 복잡한 Web3 송금을 \"10달러 송금해줘\"처럼 간단한 자연어 명령으로 처리할 수 있는 혁신적인 UX 구현. 기존 Circle API 통합과 React Native 인프라를 최대한 재사용하여 안정성과 일관성을 보장."
    },
    {
      "id": "50291a42-bbd6-4e7e-ac96-670d85c51b99",
      "name": "대화형 송금 플로우 구현",
      "description": "단계별 대화를 통한 송금 프로세스를 구현합니다. 소스 지갑 선택 → 목적지 주소 입력 → 금액 확인 → 수수료 안내 → 최종 확인 순서로 진행됩니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "3ecdd1c9-6e43-4ba3-ba4a-90e0fc3e2895"
        }
      ],
      "createdAt": "2025-08-22T12:55:04.267Z",
      "updatedAt": "2025-08-22T12:55:04.267Z",
      "relatedFiles": [
        {
          "path": "mobile/src/screens/AIChatScreen.tsx",
          "type": "TO_MODIFY",
          "description": "대화 상태 관리 및 플로우 로직 추가"
        },
        {
          "path": "mobile/src/utils/addressValidator.ts",
          "type": "CREATE",
          "description": "암호화폐 주소 유효성 검증 유틸리티"
        },
        {
          "path": "mobile/src/components/WalletSelector.tsx",
          "type": "CREATE",
          "description": "채팅 내 지갑 선택 컴포넌트"
        }
      ],
      "implementationGuide": "// 상태 기반 대화 플로우\\ninterface ChatState {\\n  step: 'INITIAL' | 'SELECT_WALLET' | 'INPUT_ADDRESS' | 'CONFIRM_AMOUNT' | 'SHOW_FEES' | 'FINAL_CONFIRM';\\n  transferData: {\\n    sourceWallet?: string;\\n    targetAddress?: string;\\n    amount?: number;\\n    estimatedFees?: number;\\n  };\\n}\\n\\nconst handleTransferFlow = async (currentState: ChatState, userInput: string) => {\\n  switch (currentState.step) {\\n    case 'SELECT_WALLET':\\n      // 지갑 목록 표시 및 선택 처리\\n      if (state.wallets.length === 1) {\\n        // 자동 선택\\n      } else {\\n        // 선택 UI 표시\\n      }\\n    case 'INPUT_ADDRESS':\\n      // 주소 유효성 검증\\n    // ... 각 단계별 처리\\n  }\\n};",
      "verificationCriteria": "송금 플로우가 단계별로 정확히 진행되고, 각 단계에서 적절한 안내와 검증이 이루어지는지 확인",
      "analysisResult": "AI 기반 자연어 USDC 송금 인터페이스 구현 - ChatGPT 스타일의 대화형 UI로 복잡한 Web3 송금을 \"10달러 송금해줘\"처럼 간단한 자연어 명령으로 처리할 수 있는 혁신적인 UX 구현. 기존 Circle API 통합과 React Native 인프라를 최대한 재사용하여 안정성과 일관성을 보장."
    },
    {
      "id": "3eeda8a9-fb88-4a35-9547-efbc79e6e569",
      "name": "음성 인식 기능 통합",
      "description": "expo-speech를 활용하여 음성 명령을 텍스트로 변환하는 기능을 구현합니다. 마이크 버튼을 통해 음성 입력을 받고 실시간으로 텍스트 변환합니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "50291a42-bbd6-4e7e-ac96-670d85c51b99"
        }
      ],
      "createdAt": "2025-08-22T12:55:04.267Z",
      "updatedAt": "2025-08-22T12:55:04.267Z",
      "relatedFiles": [
        {
          "path": "mobile/package.json",
          "type": "TO_MODIFY",
          "description": "expo-speech 의존성 추가"
        },
        {
          "path": "mobile/src/components/VoiceInput.tsx",
          "type": "CREATE",
          "description": "음성 입력 컴포넌트"
        },
        {
          "path": "mobile/src/screens/AIChatScreen.tsx",
          "type": "TO_MODIFY",
          "description": "음성 입력 기능 통합"
        },
        {
          "path": "mobile/src/utils/speechRecognition.ts",
          "type": "CREATE",
          "description": "음성 인식 유틸리티 함수"
        }
      ],
      "implementationGuide": "// expo-speech 패키지 설치 및 설정\\n1. npm install expo-speech\\n2. 마이크 권한 확인 (이미 Info.plist에 설정됨)\\n3. 음성-텍스트 변환 구현\\n\\nimport * as Speech from 'expo-speech';\\n\\nconst VoiceInput = () => {\\n  const [isListening, setIsListening] = useState(false);\\n  const [transcript, setTranscript] = useState('');\\n\\n  const startListening = async () => {\\n    try {\\n      setIsListening(true);\\n      const result = await Speech.getAvailableVoicesAsync();\\n      // 음성 인식 시작\\n    } catch (error) {\\n      console.error('음성 인식 오류:', error);\\n    }\\n  };\\n\\n  return (\\n    <TouchableOpacity onPress={startListening}>\\n      <Ionicons name={isListening ? 'mic' : 'mic-outline'} />\\n    </TouchableOpacity>\\n  );\\n};",
      "verificationCriteria": "음성 명령이 정확히 텍스트로 변환되고, 변환된 텍스트로 송금 명령이 실행되는지 확인",
      "analysisResult": "AI 기반 자연어 USDC 송금 인터페이스 구현 - ChatGPT 스타일의 대화형 UI로 복잡한 Web3 송금을 \"10달러 송금해줘\"처럼 간단한 자연어 명령으로 처리할 수 있는 혁신적인 UX 구현. 기존 Circle API 통합과 React Native 인프라를 최대한 재사용하여 안정성과 일관성을 보장."
    },
    {
      "id": "ebf609bd-dd59-4b0e-9fa4-6db2f88470d1",
      "name": "수수료 시뮬레이션 및 실시간 계산",
      "description": "송금 전에 예상 수수료를 실시간으로 계산하여 사용자에게 보여주는 기능을 구현합니다. 네트워크별 수수료를 조회하고 총 비용을 안내합니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "50291a42-bbd6-4e7e-ac96-670d85c51b99"
        }
      ],
      "createdAt": "2025-08-22T12:55:04.267Z",
      "updatedAt": "2025-08-22T12:55:04.267Z",
      "relatedFiles": [
        {
          "path": "backend/app/api/routes/ai_chat.py",
          "type": "TO_MODIFY",
          "description": "수수료 계산 엔드포인트 추가"
        },
        {
          "path": "mobile/src/components/FeeEstimate.tsx",
          "type": "CREATE",
          "description": "수수료 표시 컴포넌트"
        },
        {
          "path": "mobile/src/services/aiChatService.ts",
          "type": "TO_MODIFY",
          "description": "수수료 조회 API 호출 추가"
        }
      ],
      "implementationGuide": "// 기존 Circle API 수수료 조회 활용\\n1. Backend: Circle API 수수료 조회 엔드포인트\\n2. Frontend: 실시간 수수료 표시\\n\\n// Backend 수수료 조회\\n@router.post('/ai-chat/estimate-fees')\\nasync def estimate_transfer_fees(request: FeeEstimateRequest):\\n    fees = await circle_client.estimate_transfer_fees(\\n        source_chain=request.source_chain,\\n        target_chain=request.target_chain,\\n        amount=request.amount\\n    )\\n    return FeeEstimateResponse(\\n        gas_fee=fees.gas_fee,\\n        bridge_fee=fees.bridge_fee,\\n        total_fee=fees.total_fee\\n    )\\n\\n// Frontend 실시간 표시\\nconst FeeDisplay = ({ transferData }) => (\\n  <View style={styles.feeContainer}>\\n    <Text>송금 금액: ${transferData.amount}</Text>\\n    <Text>네트워크 수수료: ${transferData.gasFee}</Text>\\n    <Text>총 비용: ${transferData.totalCost}</Text>\\n  </View>\\n);",
      "verificationCriteria": "송금 전에 정확한 수수료가 표시되고, 실제 송금 시 예상 수수료와 일치하는지 확인",
      "analysisResult": "AI 기반 자연어 USDC 송금 인터페이스 구현 - ChatGPT 스타일의 대화형 UI로 복잡한 Web3 송금을 \"10달러 송금해줘\"처럼 간단한 자연어 명령으로 처리할 수 있는 혁신적인 UX 구현. 기존 Circle API 통합과 React Native 인프라를 최대한 재사용하여 안정성과 일관성을 보장."
    },
    {
      "id": "8399442c-fbb4-4f8a-be83-1ebb638d110b",
      "name": "주소록 및 최근 거래 연동",
      "description": "자주 사용하는 주소를 저장하고, 최근 거래 내역에서 주소를 선택할 수 있는 기능을 구현합니다. 사용자 편의성을 위한 스마트 주소 추천 시스템을 포함합니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "ebf609bd-dd59-4b0e-9fa4-6db2f88470d1"
        }
      ],
      "createdAt": "2025-08-22T12:55:04.267Z",
      "updatedAt": "2025-08-22T12:55:04.267Z",
      "relatedFiles": [
        {
          "path": "mobile/src/utils/addressBook.ts",
          "type": "CREATE",
          "description": "주소록 관리 유틸리티"
        },
        {
          "path": "mobile/src/components/AddressSelector.tsx",
          "type": "CREATE",
          "description": "주소 선택 컴포넌트"
        },
        {
          "path": "mobile/src/screens/AIChatScreen.tsx",
          "type": "TO_MODIFY",
          "description": "주소록 연동 및 스마트 추천 기능 추가"
        }
      ],
      "implementationGuide": "// AsyncStorage 활용한 주소록 관리\\n1. 즐겨찾기 주소 저장/조회\\n2. 최근 거래에서 주소 추출\\n3. 스마트 추천 시스템\\n\\ninterface AddressBookEntry {\\n  address: string;\\n  nickname: string;\\n  lastUsed: Date;\\n  frequency: number;\\n}\\n\\nconst AddressBook = {\\n  async save(entry: AddressBookEntry) {\\n    const existing = await AsyncStorage.getItem('addressBook');\\n    const addresses = existing ? JSON.parse(existing) : [];\\n    addresses.push(entry);\\n    await AsyncStorage.setItem('addressBook', JSON.stringify(addresses));\\n  },\\n  \\n  async getRecentAddresses() {\\n    // 최근 거래에서 주소 추출\\n    return state.transactions\\n      .filter(tx => tx.toAddress)\\n      .map(tx => tx.toAddress)\\n      .slice(0, 5);\\n  }\\n};",
      "verificationCriteria": "주소록이 정상적으로 저장되고, 최근 거래 주소가 추천되며, 스마트 추천이 정확히 작동하는지 확인",
      "analysisResult": "AI 기반 자연어 USDC 송금 인터페이스 구현 - ChatGPT 스타일의 대화형 UI로 복잡한 Web3 송금을 \"10달러 송금해줘\"처럼 간단한 자연어 명령으로 처리할 수 있는 혁신적인 UX 구현. 기존 Circle API 통합과 React Native 인프라를 최대한 재사용하여 안정성과 일관성을 보장."
    },
    {
      "id": "9b1795fc-f432-4784-8fcc-3d5d32613eec",
      "name": "AI 채팅 고도화 및 최적화",
      "description": "채팅 성능 최적화, 오프라인 지원, 에러 처리, 사용자 경험 개선 등 전반적인 품질 향상을 위한 고도화 작업을 수행합니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "8399442c-fbb4-4f8a-be83-1ebb638d110b"
        },
        {
          "taskId": "3eeda8a9-fb88-4a35-9547-efbc79e6e569"
        }
      ],
      "createdAt": "2025-08-22T12:55:04.267Z",
      "updatedAt": "2025-08-22T12:55:04.267Z",
      "relatedFiles": [
        {
          "path": "mobile/src/screens/AIChatScreen.tsx",
          "type": "TO_MODIFY",
          "description": "성능 최적화 및 UX 개선 적용"
        },
        {
          "path": "mobile/src/components/TypingIndicator.tsx",
          "type": "CREATE",
          "description": "AI 응답 대기 시 타이핑 효과"
        },
        {
          "path": "mobile/src/utils/chatOptimization.ts",
          "type": "CREATE",
          "description": "채팅 성능 최적화 유틸리티"
        }
      ],
      "implementationGuide": "// 성능 및 UX 최적화\\n1. FlatList 가상화로 대화 내역 성능 최적화\\n2. 오프라인 모드에서 명령 대기열 관리\\n3. 로딩 상태 및 에러 처리 개선\\n4. 타이핑 효과 및 애니메이션 추가\\n\\n// 성능 최적화\\nconst ChatList = () => (\\n  <FlatList\\n    data={messages}\\n    renderItem={renderMessage}\\n    getItemLayout={(data, index) => ({\\n      length: ITEM_HEIGHT,\\n      offset: ITEM_HEIGHT * index,\\n      index\\n    })}\\n    removeClippedSubviews={true}\\n    maxToRenderPerBatch={10}\\n  />\\n);\\n\\n// 오프라인 지원\\nconst handleOfflineCommand = async (command: string) => {\\n  await offlineStorage.queueCommand({\\n    type: 'AI_CHAT',\\n    payload: command,\\n    timestamp: Date.now()\\n  });\\n};",
      "verificationCriteria": "대화 내역이 많아도 부드럽게 스크롤되고, 오프라인에서도 명령이 대기열에 저장되며, 전반적인 사용자 경험이 향상되었는지 확인",
      "analysisResult": "AI 기반 자연어 USDC 송금 인터페이스 구현 - ChatGPT 스타일의 대화형 UI로 복잡한 Web3 송금을 \"10달러 송금해줘\"처럼 간단한 자연어 명령으로 처리할 수 있는 혁신적인 UX 구현. 기존 Circle API 통합과 React Native 인프라를 최대한 재사용하여 안정성과 일관성을 보장."
    }
  ]
}